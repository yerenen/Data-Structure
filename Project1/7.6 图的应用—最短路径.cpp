/*
* 7.5 图的应用
* 7.5.2 最短路径
* ①典型用途：
* --交通网络的问题：
* 从甲地到乙地之间是否有公路连通？在有多条通途的情况下，哪一条路最短？
* --交通网络用有向网表示：
* 顶点：地点
* 弧：表示两个地点有路连通
* 弧上的权值：表示两地之间的距离、交通费或途中所花费时间等
* --如何能使一个地点到另一个地点的运输时间最短或运费最省？这就是一个求两个地点之间的最短路径问题。
* ②问题抽象：
* 在有向网中A点（源点）到达B点（终点）的多条路径中，寻找一条各边权值之和最小的路径，即最短路径
* ③最短路径与最小生成树的区别：
* 最短路径与最小生成树不同，路径上不一定包含n个顶点，也不一定包含n-1条边
* ④问题类型
* --第一类问题：单源最短路径――Dijkstra(迪杰斯特拉)算法
* --第二类问题：所有顶点间的最短路径――Floyd（弗洛伊德）算法
*/

#if 0
第一个版本思想：
求单源最短路径算法――Dijkstra算法
1、每次从未标记的节点中选择距离出发点最近的节点，标记、收录到最优路径集合中
2、计算刚加入节点A的邻近节点B的距离（不包含标记的节点）
若（节点A的距离+节点A到节点B的边长）<节点B的距离，就更新节点B的距离和前面点

第二个版本思想：
求单源最短路径算法――Dijkstra算法
1、初始化：先找出从源点Vo到各终点Vk的直达路径(Vo,Vk),即通过一条弧到达的路径
2、选择：从这些路径中找出一条长度最短的路径(Vo,u)
--此处路径最短的顶点用u表示
--其余未能通过直达到达的顶点路径记为∞
3、更新：然后对其余各条路径进行适当调整
--若在图中存在弧(u,Vk),且(Vo,u)+(u,Vk)<(Vo,Vk),则以路径(Vo,u,Vk)代替(Vo,Vk)
--将找到最短路径的顶点放在S集合，其他顶点在T集合：T：V-S
4、在调整后的各条路径中，再找长度最短的路径，依此类推

Dijkstra算法：按路径长度递增次序产生最短路径
1、把V分成两组：
（1）S：已求出最短路径的顶点的集合
（2）T = V - S：尚未确定最短路径的顶点集合
2、将T中顶点按最短路径递增的次序加到S中
保证：
（1）从源点Vo到S中各顶点的最短路径长度都不大于从Vo到T中任何顶点的最短路径长度（即需保证Vo通过S各顶点到达T的长度是最小的）
（2）每个顶点对应一个距离值：
--S中顶点：从Vo到此顶点的最短路径长度
--T中顶点：从Vo到此顶点的只包括S中顶点作中间顶点的最短路径长度
#endif


#if 0
求所有顶点间的最短路径
方法一：每次以一个顶点作为源点，重复执行Dijkstra算法n次
方法二：Floyd算法

算法思想：
逐个顶点试探
从Vi到Vj的所有可能存在的路径中
选出一条长度最短的路径
#endif