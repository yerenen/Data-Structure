/*
* 8 查找
* 8.2 树表的查找
* 8.2.6 红黑树
* --问题：为什么要发明红黑树？
* 平衡二叉树AVL：插入/删除操作很容易破坏“平衡”的特性，需要频繁调整树的形态。如：插入操作导致不平衡，则需要先计算平衡因子，找到最小不平衡子树（时间开销大），再进行LL/RR/RL调整
* 红黑树RBT：插入/删除操作很多时候不会破坏平衡特性，无需频繁调整树的形态，即使需要调整，一般都可以在常数级时间完成
* --特点：
* 平衡二叉树―适用于以查为主，很少插入/删除的场景
* 红黑树―适用于频繁插入、删除的场景，实用性更强
* --可能的考点（22年大纲新增内容）
* ①红黑树的定义、性质
* ②红黑树的插入、删除――要能手绘插入过程（不太可能考代码，略复杂），删除操作也比较麻烦，也许不考
* --知识总览
* ①定义、性质（左根右，根叶黑，不红红，黑路同）
* 定义：
* 红黑树是二叉排序树(BST)=左子树结点值<=根结点值<=右子树结点值
* 与普通BST相比，有什么要求―
* a.每个结点或是红色，或是黑色的
* b.根结点是黑色的
* c.叶结点（外部结点、NULL结点、失败结点）均是黑色的
* d.不存在两个相邻的红结点（即红结点的父节点和孩子结点均是黑色）
* e.对每个节点，从该结点到任意结点的简单路径上，所含黑节点的数目相同
* 补充概念：结点的黑高bh：从某结点出发（不含该结点）到达任一空叶节点的路径上黑节点总数
* 性质1：从根结点到叶结点的最长路径不大于最短路径的2倍
* 性质2：有n个内部节点的红黑树高度h<=1log2(n+1)
* 思考：根结点黑高为h的红黑树，外部结点数（关键字）至少多少个？
* 回答：内部结点数最少的情况―总共h层黑结点的满树形态
* 结论：若根结点黑高为h，内部结点数（关键字）最少有2^h-1个
* ②插入
* ③删除
* a.时间复杂度：O(log2n)
* b.在红黑树中删除结点的处理方式和“二叉排序树的删除”一样
* c.按b删除节点后，可能破坏“红黑树特性”，此时需要调整结点颜色、位置，使其再次满足“红黑树特性”
*/
typedef struct RBNode{//红黑树结点定义
	int key;//关键字值
	RBNode *parent;//父节点指针
	RBNode* lchild;//左孩子指针
	RBNode* rchild;//右孩子指针
	int color;//结点颜色，如可用0/1表示黑/红，也可用枚举型enum表示
};